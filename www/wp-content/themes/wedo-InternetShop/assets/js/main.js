$(document).ready(function () {
    function t(t) {
        c = $("#" + t).attr("name"), $("#mainTariff").html(c), $("#tariff").val(c)
    }

    $(".slider-seo").owlCarousel({
        nav: !1,
        dots: !0,
        responsive: {
            0: {loop: !0, items: 1},
            600: {margin: 10, loop: !0, items: 2},
            1e3: {dots: !1, margin: 10, loop: !1, items: 3, mouseDrag: !1, touchDrag: !1, pullDrag: !1}
        }
    }), $(".slider-work").owlCarousel({
        loop: !0,
        margin: 50,
        autoplay: !0,
        smartSpeed: 2e3,
        autoplayTimeout: 7e3,
        dots: !1,
        nav: !0,
        navText: ["<img src='/wp-content/themes/wedoLandings/assets/img/Arrows-Back-icon.png'>", "<img src='/wp-content/themes/wedoLandings/assets/img/Arrows-Back-icon.png'>"],
        responsive: {0: {items: 1, dots: !0, nav: !1}, 600: {items: 1, dots: !0, nav: !1}, 1e3: {items: 1}}
    }), $(window).scroll(function () {
        $("header").css("background-position", "50% " + -$(this).scrollTop() / 2 + "px")
    }), $(".table-container-footer .btn-pink").each(function (t, i) {
        var o = t + 2;
        $(this).hover(function () {
            $(".table-container-body tr td:nth-of-type(" + o + ")").css({
                "background-color": "rgba(68,125,152,.07)",
                transition: "all 0.3s ease-in"
            })
        }, function () {
            $(".table-container-body tr td:nth-of-type(" + o + ")").css({
                "background-color": "transparent",
                transition: "all 0.3s ease-in"
            })
        }).click(function () {
            $(".table-container-body tr td").each(function () {
                $(this).hasClass("clicked") && $(this).removeClass("clicked")
            }), $(".table-container-body tr td:nth-of-type(" + o + ")").addClass("clicked")
        })
    }), wrapper = $(".tabs"), tabs = wrapper.find(".tab"), tabToggle = wrapper.find(".tab-toggle"), tabToggle.on("click", function () {
        var t = $(this).parent().next(".content"), i = wrapper.find(".active");
        $(this).hasClass("active") || ($(this).add(t).add(i).toggleClass("active"), wrapper.css("min-height", "400px"))
    }), tabToggle.first().trigger("click"), $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    }), $("#myModal, #myModal3").on("shown.bs.modal", function () {
    }), $("#menu").on("click", "a", function (t) {
        t.preventDefault();
        var i = $(this).attr("href"), o = $(i).offset().top;
        $("body,html").animate({scrollTop: o}, 1500)
    }), $("#commercial-offer").submit(function () {
        return null !== $("#Phone-com").val().match(/(?:\w)(?:(?:(?:(?:\+?3)?8\W{0,5})?0\W{0,5})?[34569]\s?\d[^\w,;(\+]{0,5})?\d\W{0,5}\d\W{0,5}\d\W{0,5}\d\W{0,5}\d\W{0,5}\d\W{0,5}\d(?!(\W?\d))/) ? $.ajax({
            type: "POST",
            url: "mail.php",
            data: $("#commercial-offer").serialize()
        }).done(function () {
            $(".modal.commercial").modal("toggle"), $(".modal.thank-you").modal("toggle")
        }) : $("#errorMessage2").css("display", "block"), !1
    }), $("#callback-form").submit(function () {
        return null !== $("#Phone").val().match(/(?:\w)(?:(?:(?:(?:\+?3)?8\W{0,5})?0\W{0,5})?[34569]\s?\d[^\w,;(\+]{0,5})?\d\W{0,5}\d\W{0,5}\d\W{0,5}\d\W{0,5}\d\W{0,5}\d\W{0,5}\d(?!(\W?\d))/) ? $.ajax({
            type: "POST",
            url: "mail.php",
            data: $("#callback-form").serialize()
        }).done(function () {
            $(".modal.call-us").modal("toggle"), $(".modal.thank-you").modal("toggle")
        }) : $("#errorMessage").css("display", "block"), !1
    }), $("#open-close").show(), $(".wrap-alert").show(), $("#open-close").click(function (t) {
        t.preventDefault(), $(".wrap-alert").slideToggle()
    });
    var i = $(".table-container-body"), o = $(".table-container-header"), e = $(".table-container-footer"),
        a = function () {
            var t, i, o = $("<p/>").addClass("fixed-table-scroll-inner"),
                e = $("<div/>").addClass("fixed-table-scroll-outer");
            return e.append(o), $("body").append(e), t = o[0].offsetWidth, e.css("overflow", "scroll"), i = o[0].offsetWidth, t === i && (i = e[0].clientWidth), e.remove(), t - i
        }();
    i.on("scroll", function () {
        o.scrollLeft($(this).scrollLeft()), e.scrollLeft($(this).scrollLeft())
    });
    var n = function () {
        var t = i.find("> table > tbody > tr:first-child > td");
        t.each(function (i) {
            var n = $(this).innerWidth(), l = t.length - 1 == i ? a : 0;
            lastHeader = o.find("th:eq(" + i + ")").innerWidth(n + l), lastFooter = e.find("th:eq(" + i + ")").innerWidth(n + l)
        })
    };
    i.find("> table > tbody > tr > td").click(function (t) {
        i.find("> table > tbody > tr").removeClass("info"), $(t.target).parent().addClass("info")
    }), $(window).resize(n), n();
    var l = [{price: allOptions.main.light.price}, {price: allOptions.main.medium.price}, {price: allOptions.main.premium.price}];
    $(".table-container-footer .price").each(function (t) {
        $(this).text("$" + l[t].price)
    }), $(".tab-content .price").each(function (t) {
        $(this).find("p").text("$" + l[t].price)
    });
    var r, s, c, d = $("input[type=checkbox]"), p = {}, m = allOptions.main.light.price, h = 0,
        f = allOptions.main.light.time, u = 0;
    t("light"), $('[id="light"]').click(function () {
        m = allOptions.main.light.price, f = allOptions.main.light.time, t(this.id), d.change(), $("html, body").animate({scrollTop: $("div.options").offset().top}, 1e3)
    }), $('[id="medium"]').click(function () {
        m = allOptions.main.medium.price, f = allOptions.main.medium.time, d.change(), t(this.id), $("html, body").animate({scrollTop: $("div.options").offset().top}, 1e3)
    }), $('[id="premium"]').click(function () {
        m = allOptions.main.premium.price, f = allOptions.main.premium.time, d.change(), t(this.id), $("html, body").animate({scrollTop: $("div.options").offset().top}, 1e3)
    }), $("#modalBtn").click(function () {
        d.change()
    }), d.change(function () {
        h = 0, u = 0, $("input[type=checkbox]").each(function () {
            this.checked ? (p[this.id] = this.name, h += allOptions.options[this.id].price, u += allOptions.options[this.id].time) : void 0 !== p[this.id] && delete p[this.id]
        }), r = parseInt(m) + parseInt(h), s = parseInt(f) + parseInt(u), function (t, i) {
            $("#totalPrice").html("$" + t), $("#totalPriceForm").html("$" + t);
            var o = "месяца";
            1 == i ? o = "месяц" : i > 4 && (o = "месяцев"), $("#totalTime").html(i + " " + o), $("#totalTimeForm").html(i + " " + o), $("#cost-val").val(t), $("#date").val(i + " " + o)
        }(r, s), function (t) {
            var i = Object.values(t);
            $("#additionalOptions").html(i.join(";")), $("#options").val(i)
        }(p)
    }), $("#cost, #feature, #why-us, #promotion, #works").animated("slideInUp", "slideOutUp"), $(".options, .wrap-cost, .home-button").animated("slideInUp", "slideOutUp")
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
